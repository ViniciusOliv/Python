import random, time, sys
from multiprocessing import Process, Pipe


def main():

    lista = importa_lista('/content/drive/MyDrive/trabalhos/python/1000numeros.txt')

    lystbck = lista

    time.sleep(3)
    

    lyst = list(lystbck)
    
    start = time.time()
    n = 3 

    pconn, cconn = Pipe()
    

    p = Process(target=quicksortParallel, \
                args=(lyst, cconn, n))
    p.start()
    
    lyst = pconn.recv()

    p.join()
    elapsed = time.time() - start

    if not isSorted(lyst):
        print('Não funcionou.')

    print('Tempo de execução: %f sec' % (elapsed))

    
def quicksort(lyst):

    if len(lyst) <= 1:
        return lyst
    pivo = lyst.pop(random.randint(0, len(lyst)-1))
    
    return quicksort([x for x in lyst if x < pivo]) \
           + [pivo] \
           + quicksort([x for x in lyst if x >= pivo])

def quicksortParallel(lyst, conn, procNum):

    if procNum <= 0 or len(lyst) <= 1:

        conn.send(quicksort(lyst))
        conn.close()
        return


    pivo = lyst.pop(random.randint(0, len(lyst)-1))

    esquerdaLado = [x for x in lyst if x < pivo]
    direitaLado = [x for x in lyst if x >= pivo]


    pconnesquerda, cconnesquerda = Pipe()

    esquerdaProc = Process(target=quicksortParallel, \
                       args=(esquerdaLado, cconnesquerda, procNum - 1))
    

    pconndireita, cconndireita = Pipe()
    direitaProc = Process(target=quicksortParallel, \
                       args=(direitaLado, cconndireita, procNum - 1))

    esquerdaProc.start()
    direitaProc.start()

    conn.send(pconnesquerda.recv() + [pivo] + pconndireita.recv())
    conn.close()

    esquerdaProc.join()
    direitaProc.join()

def isSorted(lyst):

    for i in range(1, len(lyst)):
        if lyst[i] < lyst[i-1]:
            return False
    return True

if __name__ == '__main__':
    main()
    
    
